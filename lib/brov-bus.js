// Generated by CoffeeScript 1.9.3
(function() {
  var BrovBus;

  BrovBus = (function() {
    BrovBus.busType = void 0;

    BrovBus.busName = void 0;

    function BrovBus(busType, busName, options) {
      if (busType == null) {
        throw new Error('brov-bus.constructor: busType argument is missing');
      }
      if (busName == null) {
        throw new Error('brov-bus.constructor: busName argument is missing');
      }
      console.log("Instancing new Brov-Bus " + busName);
      this.busName = busName;
      console.log("...Selecting bus type");
      if (options != null) {
        console.log("......Options provided: " + (JSON.stringify(options)));
      }
      switch (busType) {
        case 'zmq':
        case void 0:
          this.zmq = require('zmq');
          this.busType = 'zmq';
          this.zmqUri = "inproc://bluerovqueue";
          if (options != null) {
            if (options["zmqUri"] != null) {
              this.zmqUri = options["zmqUri"];
            }
          }
          console.log("......(zmqUri set to " + this.zmqUri + ")");
          break;
        case 'events':
          this.busType = 'events';
          throw new Error("busType events - NOT IMPLEMENTED YET");
          break;
        default:
          throw new Error('brov-bus.constructor: unknown bus type (#{@busType})');
      }
      console.log("......" + this.busType + " type bus is now setup");
      return;
    }

    BrovBus.prototype.registerSubscriber = function(callback, filters) {
      var filter, i, len, subscriber, zmqcallback;
      if (callback == null) {
        throw new Error("registerSubscriber: callback argument is missing");
      }
      console.log("Registering a new subscriber on " + this.busName + ", filters set to " + (JSON.stringify(filters)));
      switch (this.busType) {
        case 'zmq':
          subscriber = this.zmq.socket("sub");
          subscriber.connect(this.zmqUri);
          if (filters == null) {
            subscriber.subscribe('');
          } else {
            for (i = 0, len = filters.length; i < len; i++) {
              filter = filters[i];
              subscriber.subscribe(filter);
            }
          }
          zmqcallback = function(msg) {
            var err, message, splittedMsg;
            err = null;
            splittedMsg = msg.toString().split(' ');
            if (splittedMsg.length < 2) {
              err = new Error("(BrovBus.registerSubscriber - zmqcallback) - incorrect zmq message (no space or empty)");
            }
            filter = splittedMsg[0];
            message = splittedMsg.slice(1).join(' ');
            return callback(err, filter, message);
          };
          subscriber.on('message', zmqcallback);
          break;
        case 'events':
          throw new Error("registerSubscriber / events - NOT IMPLEMENTED");
          break;
        default:
          throw new Error("Internal error");
      }
    };

    BrovBus.prototype.registerPublisher = function() {
      var Publisher, pub, publisher;
      Publisher = (function() {
        function Publisher() {}

        Publisher._publisher = void 0;

        Publisher.prototype._setPublisher = function(_publisher) {
          this._publisher = _publisher;
        };

        Publisher.prototype._setSend = function(send) {
          this.send = send;
        };

        Publisher.send = function(filter, message) {};

        return Publisher;

      })();
      publisher = new Publisher;
      switch (this.busType) {
        case 'zmq':
          pub = this.zmq.socket("pub");
          pub.bind(this.zmqUri, function() {
            if (typeof err !== "undefined" && err !== null) {
              throw err;
            }
          });
          publisher._setPublisher(pub);
          publisher._setSend(function(filter, message) {
            return this._publisher.send(filter + " " + message);
          });
          break;
        case 'events':
          throw new Error("registerSubscriber / events - NOT IMPLEMENTED");
          break;
        default:
          throw new Error("Internal error");
      }
      return publisher;
    };

    return BrovBus;

  })();

  module.exports = BrovBus;

}).call(this);
